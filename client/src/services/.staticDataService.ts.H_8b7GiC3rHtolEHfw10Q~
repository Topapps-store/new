/**
 * Servicio de datos estático
 * 
 * Este archivo proporciona funciones para acceder a los datos
 * almacenados en archivos JSON estáticos en lugar de una base de datos.
 */

import appsData from '../data/apps.json';
import categoriesData from '../data/categories.json';
import affiliateLinksData from '../data/affiliateLinks.json';

// Tipos básicos (versiones simplificadas de los esquemas de la base de datos)
export interface AppLegacy {
  id: string;
  name: string;
  description: string;
  icon: string;
  googlePlayUrl?: string;
  appStoreUrl?: string;
  rating?: number;
  downloads?: string;
  developer?: string;
  categoryId?: string;
  screenshots?: string[];
  createdAt?: string;
  updatedAt?: string;
  featured?: boolean;
  trending?: boolean;
  priority?: number;
  version?: string;
  size?: string;
}

export interface CategoryLegacy {
  id: string;
  name: string;
  description?: string;
  icon?: string;
  createdAt?: string;
  updatedAt?: string;
}

export interface AffiliateLink {
  id: number;
  appId: string;
  url: string;
  clicks: number;
}

// Funciones para apps
export function getAllApps(): AppLegacy[] {
  return appsData;
}

export function getPopularApps(): AppLegacy[] {
  // Ordenar por rating y devolver los primeros 10
  return [...appsData]
    .sort((a, b) => (b.rating || 0) - (a.rating || 0))
    .slice(0, 10);
}

export function getRecentApps(): AppLegacy[] {
  // Ordenar por fecha de creación (más recientes primero) y devolver los primeros 10
  return [...appsData]
    .sort((a, b) => {
      const dateA = a.createdAt ? new Date(a.createdAt).getTime() : 0;
      const dateB = b.createdAt ? new Date(b.createdAt).getTime() : 0;
      return dateB - dateA;
    })
    .slice(0, 10);
}

export function getJustInTimeApps(): AppLegacy[] {
  // Ordenar por fecha de actualización (más recientes primero) y devolver los primeros 10
  return [...appsData]
    .sort((a, b) => {
      const dateA = a.updatedAt ? new Date(a.updatedAt).getTime() : 0;
      const dateB = b.updatedAt ? new Date(b.updatedAt).getTime() : 0;
      return dateB - dateA;
    })
    .slice(0, 10);
}

export function getAppById(id: string): AppLegacy | undefined {
  return appsData.find(app => app.id === id);
}

export function searchApps(query: string): AppLegacy[] {
  const lowerQuery = query.toLowerCase();
  return appsData.filter(app => 
    app.name.toLowerCase().includes(lowerQuery) || 
    (app.description && app.description.toLowerCase().includes(lowerQuery))
  );
}

export function getRelatedApps(id: string): AppLegacy[] {
  const app = getAppById(id);
  if (!app || !app.categoryId) {
    return [];
  }
  
  // Obtener apps de la misma categoría, excluyendo la app actual
  return appsData
    .filter(a => a.categoryId === app.categoryId && a.id !== id)
    .slice(0, 6); // Limitar a 6 apps relacionadas
}

// Funciones para categorías
export function getCategories(): CategoryLegacy[] {
  return categoriesData;
}

export function getCategoryById(id: string): CategoryLegacy | undefined {
  return categoriesData.find(category => category.id === id);
}

export function getAppsByCategory(categoryId: string): AppLegacy[] {
  return appsData.filter(app => app.categoryId === categoryId);
}

// Funciones para enlaces de afiliados
export function getAffiliateLinks(appId: string): AffiliateLink[] {
  return affiliateLinksData.filter(link => link.appId === appId);
}

// Función de utilidad para guardar datos (simulada)
export function saveData(type: 'apps' | 'categories' | 'affiliateLinks', data: any): boolean {
  console.log(`[StaticDataService] Simulating save of ${type} data`);
  console.log(data);
  return true; // En un entorno real, aquí se escribiría al sistema de archivos
}